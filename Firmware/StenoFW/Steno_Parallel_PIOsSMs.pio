;read the key matrix of the Stenokey very fast, 
;pushing every detected key into the FIFO queue.
;the queue must be flushed from the main thread not here.
; ReadColumn and ReadRow are clock synchronized.
; iterate through entire matrix reading both column and row for each entry.

; NOTE: must synchronize all SMs see CTRL_SM_ENABLED this only 
; 		works for a single PIO but should still be overkill.
;   can synchronize two PIOs with IRQ
; use two side sets for each PIO

; TODO: just write something make performant later

.program ReadColumn
;PIO1, use all SMs on cols to maximize read freq
.wrap_target
	;TODO: how many SMs are needed for 34 pins? 
	;	   Can half read rows and half read columns with shared pinsets?
	;		just have two states
	;write row
	;read column x_thisSM(just use pinset)
	; read for a certain duration? or just cycle fast?
	;write reads to FIFO or DMA
.wrap

.program ReadRow
;PIO2, use all SMs on rows to maximize read freq
.wrap_target
	;write column (or stall?)
	;read row x_thisSM (just use pinset)
	;write reads to FIFO or DMA
.wrap

; TODO: DMA a matrix instead of FIFO a unrolled matrix partition if possible


; TODO: just use default config file
;assign a SM to read a partition of the key matrix.
;maximizes the probability of reading distinct bounces in the chord waveform.
static inline void initReader(PIO pio, uint SM, uint offset, uint start_pin, uint end_pin, isRowRead){
	for(int i=start_pin; i<end_pin; i++){
		pio_gpio_init(pio, pin);
	}
}

; microcontroller &&'s both FIFOs to yield true positives
